# -*- coding: utf-8 -*-
"""Suspicious.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_ABOCuYOht1b2TxzaC6VcqCDhhErGLIh

#Creazione dataset
"""

from google.colab import drive 
import pandas as pd
import re
from glob import glob
import numpy as np

from scipy.stats import pearsonr
import matplotlib.pyplot as plt
import seaborn as sns

drive.mount('/content/gdrive')
suspicious_removed = False

!cp -av '/content/gdrive/My Drive/DS Lab - PROGETTO/Dataset aggregati' 'campaignClickDataset'

part_files = sorted(glob('campaignClickDataset/part*.csv'))

df = pd.concat((pd.read_csv(file) for file in part_files), ignore_index=True)

df.shape

"""## Eliminazione delle colonne con tutti zeri"""

zeros_columns = []
for column in df:
    if (df[column] == 0.0).all():
      zeros_columns.append(column)
zeros_columns

try:
  df.drop(zeros_columns, axis = 1, inplace = True)
except:
  print('Probably the column has already been dropped in a previously execution. Continue')

df.shape

"""## Eliminazione di Categories2 e Categories3"""

# colonne che devo utilizzare (S perchè utilizzo dopo times1 e times2)
colonne = df.columns.to_numpy()
c2 = re.compile('^categories2+.*', re.IGNORECASE)
c3 = re.compile('^categories3+.*', re.IGNORECASE)
cat2 = []
cat3 = []

for v in colonne:
  if c2.search(v):
    cat2.append(v)
  if c3.search(v):
    cat3.append(v)

# elimino colonne 
df.drop(columns=cat2, inplace=True)
df.drop(columns=cat3, inplace=True)

ddd = list(df.columns)
for d in ddd: 
  print(d)

"""## Eliminazione di admants"""

AD = re.compile('^admants+.*', re.IGNORECASE)
admants = []

for v in df.columns:
  if AD.search(v):
    admants.append(v)

admants

df.drop(columns=admants, inplace=True)

"""## Eliminazione di feelings e time2"""

colonne = df.columns.to_numpy()
t2 = re.compile('^time2+.*', re.IGNORECASE)
time2 = []

for v in colonne:
  if t2.search(v):
    time2.append(v)

df.drop(columns=time2, inplace=True)

colonne = df.columns.to_numpy()
f = re.compile('^feelings+.*', re.IGNORECASE)
feelings = []

for v in colonne:
  if f.search(v):
    feelings.append(v)

df.drop(columns=feelings, inplace=True)

"""## Normalizzazione

### Normalization of Categories
"""

# Colonne categories1
cat1 = re.compile('categories1_+.*', re.IGNORECASE)
cats1 = []
for label in colonne:
  occ = cat1.findall(label)
  if occ:
    cats1.append(occ[0])
  
# Calcolo somma
def somma_cat1(riga):
  sum = 0
  for cat in cats1:
    sum += riga[cat]
  return(round(sum, 1))

df['somma1'] = df.apply(somma_cat1, axis=1)

# Normalizzo le somme a 100
for cat in cats1:
  df[cat] = (df[cat] / df['somma1']) * 100
df['somma1'] = df.apply(somma_cat1, axis=1)

"""### Eliminazione righe con somma infinito"""

df[(df['somma1'] != 100) & (df['somma1'].isnull())][['somma1']]

sum(df['somma1'].isnull())

df['somma1'].shape

indexNames = df[ (df['somma1'].isnull())].index
df.drop(indexNames, inplace=True)
df['somma1'].shape

df.drop(columns=['somma1'], inplace=True)

"""### Normalizzazione della lunghezza della pagina"""

L = re.compile('^L+.*', re.IGNORECASE)
lung = []

for v in df.columns:
  if L.search(v):
    print(v)
    lung.append(v)

def somma_lung(riga):
  sum = 0
  for el in lung:
    sum += riga[el]
  return sum

df['somma'] = df.apply(somma_lung, axis=1)
df[['somma']]

from numpy import inf
sum(df['L00_50'] == inf)

sum(df['somma'] == inf)

sum(df['somma'].isnull())

sum(df['somma'] != 100)

for l in lung:
  df[l] = (df[l] / df['somma']) * 100
df['somma'] = df.apply(somma_lung, axis=1)

df[['L00_50', 'L51_100', 'L101_250', 'L251_500', 'L501_1000', 'L1001_2500', 'L2501_5000', 'L5001_10000', 'L10001_more', 'somma']]

# delete coloumn 'somma'
df.drop(columns=['somma'], inplace=True)

"""### Normalizzazione di time"""

# colonne che devo utilizzare (S perchè utilizzo dopo times1 e times2)
colonne = df.columns.to_numpy()
t1 = re.compile('^time1+.*', re.IGNORECASE)
times1 = []

for v in colonne:
  if t1.search(v):
    print(v)
    times1.append(v)

# calcolo somma dei tempi (S)
df['sommat1'] = (df['time1_workday_morning'] + df['time1_workday_afternoon'] + df['time1_workday_evening'] + df['time1_workday_night'] +
                 df['time1_weekend_morning'] + df['time1_weekend_afternoon'] + df['time1_weekend_evening'] + df['time1_weekend_night'])

# Riscalo i tempi(2) in modo che somma sia 100 (S)
for t1 in times1:
  df[t1] = df[t1]/ df['sommat1']*100

df[times1].head(5)

# passaggi per controllo (arrotondo così non mi dà problemi se chiedo se è pari a 100)

df['sommat1'] = round(df['time1_workday_morning'] + df['time1_workday_afternoon'] + df['time1_workday_evening'] + df['time1_workday_night'] +
                 df['time1_weekend_morning'] + df['time1_weekend_afternoon'] + df['time1_weekend_evening'] + df['time1_weekend_night'], 2)

df[(df['sommat1'] != 100)][['sommat1']]

# elimino colonne contenenti la somma dei tempi (S)
df.drop(columns=['sommat1'], inplace=True)

"""## Unione in dummy variables"""

os_type = (np.zeros(df.shape[0], dtype=int))
browser_type = (np.zeros(df.shape[0], dtype=int))

df.insert(3, 'os_type', os_type)
df.insert(4, 'browser_type', browser_type)

os = ['android', 'bsd', 'ios', 'linux', 'osx', 'other', 'windows']
for nome in os:
  print(f'non zeros values os_{nome} = ' + str(len(df[df[f'os_{nome}']==1])))

df.drop(columns=['os_ios'], inplace=True)

browser = ['android', 'chrome', 'edge', 'firefox', 'ie', 'opera', 'other', 'safari', 'unknown']
for nome in browser:
  print(f'non zeros values browser_{nome} = ' + str(len(df[df[f'browser_{nome}']==1])))

for i in df.index:
  if df['os_bsd'].loc[i] == 1:
    df.at[i, 'os_type'] = 1
  elif df['os_linux'].loc[i] == 1:
    df.at[i, 'os_type'] = 2
  elif df['os_osx'].loc[i] == 1:
    df.at[i, 'os_type'] = 3
  elif df['os_windows'].loc[i] == 1:
    df.at[i, 'os_type'] = 4
  elif df['os_other'].loc[i] == 1:
    df.at[i, 'os_type'] = 5
  else:
    df.at[i, 'os_type'] = 0

for i in df.index:
  if df['browser_chrome'].loc[i] == 1:
    df.at[i, 'browser_type'] = 1
  elif df['browser_edge'].loc[i] == 1:
    df.at[i, 'browser_type'] = 2
  elif df['browser_firefox'].loc[i] == 1:
    df.at[i, 'browser_type'] = 3
  elif df['browser_ie'].loc[i] == 1:
    df.at[i, 'browser_type'] = 4
  elif df['browser_opera'].loc[i] == 1:
    df.at[i, 'browser_type'] = 5
  elif df['browser_safari'].loc[i] == 1:
    df.at[i, 'browser_type'] = 6
  elif df['browser_other'].loc[i] == 1:
    df.at[i, 'browser_type'] = 7
  elif df['browser_unknown'].loc[i] == 1:
    df.at[i, 'browser_type'] = 8
  else:
    df.at[i, 'browser_type'] = 0

df.drop(columns=['os_android', 'os_bsd', 'os_linux', 'os_osx', 'os_other', 'os_windows'], inplace=True)
df.drop(columns=['browser_android', 'browser_chrome', 'browser_edge', 'browser_firefox', 'browser_ie', 'browser_opera', 'browser_other', 'browser_safari', 'browser_unknown'], inplace=True)

"""### Unione di L"""

lenght = ['L00_50', 'L51_100', 'L101_250', 'L251_500', 'L501_1000', 'L1001_2500', 'L2501_5000', 'L5001_10000', 'L10001_more']
for nome in lenght:
  print(f'non zeros values {nome} = ' + str(len(df[df[f'{nome}']==0])))

L101_500 = df['L101_250'] + df['L251_500']

L501_more = df['L501_1000'] + df['L1001_2500'] + df['L2501_5000'] + df['L5001_10000'] + df['L10001_more']

df.insert(20, 'L101_500', L101_500)
df.insert(21, 'L501_more', L501_more)

zero = df['L00_50']+df['L51_100']+df['L101_500']+df['L501_more']

for riga in zero:
  if riga < 99:
    print(riga)

df.drop(columns=['L101_250', 'L251_500', 'L501_1000', 'L1001_2500', 'L2501_5000', 'L5001_10000', 'L10001_more'], inplace=True)

"""## NaN"""

df.fillna(df.mean(), inplace=True)

# calcolo somma dei tempi (S)
df['sommat1'] = (df['time1_workday_morning'] + df['time1_workday_afternoon'] + df['time1_workday_evening'] + df['time1_workday_night'] +
                 df['time1_weekend_morning'] + df['time1_weekend_afternoon'] + df['time1_weekend_evening'] + df['time1_weekend_night'])

# Riscalo i tempi(1) in modo che somma sia 100 (S)
for t1 in times1:
  df[t1] = df[t1]/ df['sommat1']*100

# elimino colonne contenenti la somma dei tempi (S)
df.drop(columns=['sommat1'], inplace=True)

# passaggi per controllo (arrotondo così non mi dà problemi se chiedo se è pari a 100)

df['sommat1'] = round(df['time1_workday_morning'] + df['time1_workday_afternoon'] + df['time1_workday_evening'] + df['time1_workday_night'] +
                 df['time1_weekend_morning'] + df['time1_weekend_afternoon'] + df['time1_weekend_evening'] + df['time1_weekend_night'], 2)

# controllo: tutte le somme sono a 100

df[(df['sommat1'] != 100)][['sommat1']]

# elimino colonne contenenti la somma dei tempi (S)
df.drop(columns=['sommat1'], inplace=True)

# Controllo colonne nulle (qui per verificare che non ci siano eventuali somme nulle)
df[df.isnull().any(axis=1)]

"""#Suspicious

##Number of suspicious = 1
"""

df[df['suspicious'] == 1]

"""Sono 134 quelli con suspicious = 1

##Analisi descrittiva tenendo tutto il dataset intero
"""

df.info()

plt.rc("font", size=14)
import seaborn as sns
sns.set(style="white")
sns.set(style="whitegrid", color_codes=True)

df['suspicious'].value_counts()

count_0_susp = len(df[df['suspicious'] == 0])
count_susp = len(df[df['suspicious'] == 1])
pct_of_0_susp = count_0_susp/(count_0_susp + count_susp)
print("percentage of 0 suspicious is", pct_of_0_susp*100)
pct_of_susp = count_susp/(count_0_susp + count_susp)
print("percentage of suspicious", pct_of_susp*100)

table=pd.crosstab(df.device_type,df.suspicious)
table.div(table.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True)
plt.title('Stacked Bar Chart di device_type vs suspicious')
plt.xlabel('Tipo di Device')
plt.ylabel('Distribuzione di Suspicious')
plt.savefig('device.png', dpi=300, facecolor='w', bbox_inches='tight', pad_inches=0)

"""Attenzione qui si vede che molti sono nel 3"""

table=pd.crosstab(df.os_type,df.suspicious)
table.div(table.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True)
plt.title('Stacked Bar Chart di os_type vs suspicious')
plt.xlabel('Tipo di Os')
plt.ylabel('Distribuzione di Suspicious')
plt.savefig('os.png', dpi=300, facecolor='w', bbox_inches='tight', pad_inches=0)

"""##Lavoro solo con il dataset con suspicious = 1"""

df_suspicious = df[df['suspicious'] == 1]

df_suspicious.shape

df_suspicious['device_type'].value_counts()

"""119/134 è 89%"""

df_suspicious['browser_type'].value_counts()

df_suspicious['clicks'].value_counts()

"""131/134 è 98%"""

df_suspicious['impressions'].value_counts()

df_suspicious['os_type'].value_counts()

"""119/134 è 89%"""

ad_negative = len(df_suspicious[df_suspicious['ad_form_id'] < 0])
print(f"ad_form_id negative are {ad_negative}/134")

zeros_columns = []
for column in df_suspicious:
    if (df_suspicious[column] == 0.0).all():
      zeros_columns.append(column)
zeros_columns

df_suspicious.groupby('suspicious')['time1_workday_morning', 'time1_workday_afternoon', 'time1_workday_evening', 'time1_workday_night', 'time1_weekend_morning', 'time1_weekend_afternoon', 'time1_weekend_evening', 'time1_weekend_night'].mean()

df_suspicious.groupby('suspicious')['L00_50', 'L51_100', 'L101_500', 'L501_more'].mean()

df_suspicious.groupby('suspicious')['categories1_artandentertainment', 'categories1_automotive', 'categories1_business', 'categories1_careers', 'categories1_education', 'categories1_familyandparenting', 'categories1_finance', 'categories1_foodanddrink', 'categories1_healthandfitness', 'categories1_hobbiesandinterests', 'categories1_homeandgarden', 'categories1_intentions', 'categories1_lawgovtandpolitics', 'categories1_news', 'categories1_pets', 'categories1_realestate', 'categories1_religionandspirituality'].mean()

df_suspicious.groupby('suspicious')['categories1_science', 'categories1_shopping', 'categories1_society', 'categories1_sports', 'categories1_styleandfashion', 'categories1_technologyandcomputing', 'categories1_travel', 'categories1_uncategorized'].mean()

impress = len(df_suspicious[df_suspicious['impressions'] > df_suspicious['clicks']])
print(f"number of impressions bigger than number of clicks {impress}/134")

"""Le righe con suspicious = 1 hanno:
*   98% di clicks nulli
*   99% di impressions maggiori di clicks
*   89% di device type = 3 = Desktop and Laptop
*   89% di os type = 5 = os_other
*   73% di ad_form_id negativi
*   81% di lunghezza tra 0 e 50
*   71% di categories1_technologyandcomputing


"""